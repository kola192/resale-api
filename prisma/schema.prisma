generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model agent_details {
  id                Int       @id @default(autoincrement())
  agent_id          Int?
  commercial_number String?   @db.VarChar(255)
  created           DateTime? @default(now()) @db.Timestamp(0)
  updated           DateTime? @default(now()) @db.Timestamp(0)
  agents            agents?   @relation(fields: [agent_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_agent_details_agents_1")

  @@index([agent_id], map: "fk_agent_details_agents_1")
}

model agent_users {
  id           Int       @id @default(autoincrement())
  agent_id     Int
  user_id      Int
  is_main_user Boolean
  created      DateTime? @default(now()) @db.Timestamp(0)
  updated      DateTime? @default(now()) @db.Timestamp(0)
  agents       agents    @relation(fields: [agent_id], references: [id], onUpdate: Restrict, map: "fk_platform_agent_users_platform_agents_1")
  users        users     @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "fk_platform_agent_users_users_1")

  @@index([agent_id], map: "fk_platform_agent_users_platform_agents_1")
  @@index([user_id], map: "fk_platform_agent_users_users_1")
}

model agents {
  id            Int             @id @default(autoincrement())
  agent_type_id Int
  name          String          @db.VarChar(255)
  image         String?         @db.VarChar(255)
  created       DateTime?       @default(now()) @db.Timestamp(0)
  updated       DateTime?       @default(now()) @db.Timestamp(0)
  agent_details agent_details[]
  agent_users   agent_users[]
  agents_types  agents_types    @relation(fields: [agent_type_id], references: [id], onUpdate: Restrict, map: "fk_platform_agents_platform_agents_types_1")
  inventories   inventories[]
  orders        orders[]
  products      products[]

  @@index([agent_type_id], map: "fk_platform_agents_platform_agents_types_1")
}

model agents_types {
  id      Int       @id @default(autoincrement())
  name    String    @db.VarChar(255)
  name_en String    @db.VarChar(255)
  code    String    @db.VarChar(255)
  created DateTime? @default(now()) @db.Timestamp(0)
  updated DateTime? @default(now()) @db.Timestamp(0)
  agents  agents[]
}

model categories {
  id               Int          @id @default(autoincrement())
  parent_id        Int?
  name             String       @db.VarChar(255)
  name_en          String       @db.VarChar(255)
  image            String       @db.VarChar(255)
  created          DateTime     @default(now()) @db.Timestamp(0)
  updated          DateTime     @default(now()) @db.Timestamp(0)
  categories       categories?  @relation("categoriesTocategories", fields: [parent_id], references: [id], map: "categories_ibfk_1")
  other_categories categories[] @relation("categoriesTocategories")
  products         products[]

  @@index([parent_id], map: "parent_id")
}

model cities {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  name_en          String             @db.VarChar(255)
  created          DateTime?          @default(now()) @db.Timestamp(0)
  updated          DateTime?          @default(now()) @db.Timestamp(0)
  product_location product_location[]
}

model inventory_item_logs {
  id                                                             Int                 @id @default(autoincrement())
  inventory_log_type_id                                          Int
  inventory_item_id                                              Int
  from_inventory_id                                              Int
  to_inventory_id                                                Int
  price                                                          Decimal             @default(0.00) @db.Decimal(10, 2)
  qty                                                            Int                 @default(0)
  created                                                        DateTime            @default(now()) @db.Timestamp(0)
  updated                                                        DateTime            @default(now()) @db.Timestamp(0)
  inventory_log_types                                            inventory_log_types @relation(fields: [inventory_log_type_id], references: [id], map: "inventory_item_logs_ibfk_1")
  inventory_items                                                inventory_items     @relation(fields: [inventory_item_id], references: [id], map: "inventory_item_logs_ibfk_2")
  inventories_inventory_item_logs_from_inventory_idToinventories inventories         @relation("inventory_item_logs_from_inventory_idToinventories", fields: [from_inventory_id], references: [id], map: "inventory_item_logs_ibfk_3")
  inventories_inventory_item_logs_to_inventory_idToinventories   inventories         @relation("inventory_item_logs_to_inventory_idToinventories", fields: [to_inventory_id], references: [id], map: "inventory_item_logs_ibfk_4")

  @@index([from_inventory_id], map: "from_inventory_id")
  @@index([inventory_item_id], map: "inventory_item_id")
  @@index([inventory_log_type_id], map: "inventory_log_type_id")
  @@index([to_inventory_id], map: "to_inventory_id")
}

model inventory_log_types {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(255)
  name_en             String                @db.VarChar(255)
  code                String                @db.VarChar(255)
  created             DateTime              @default(now()) @db.Timestamp(0)
  updated             DateTime              @default(now()) @db.Timestamp(0)
  inventory_item_logs inventory_item_logs[]
}

model order_details {
  id                Int       @id @default(autoincrement())
  order_id          Int?
  inventory_item_id Int?
  qty               Int?
  price             Decimal?  @db.Decimal(10, 2)
  created           DateTime? @default(now()) @db.Timestamp(0)
  updated           DateTime? @default(now()) @db.Timestamp(0)

  @@index([inventory_item_id], map: "fk_order_details_inventory_items_1")
  @@index([order_id], map: "fk_order_details_orders_1")
}

model order_status {
  id      Int      @id @default(autoincrement())
  name    String   @db.VarChar(255)
  name_en String   @db.VarChar(255)
  code    String   @db.VarChar(255)
  created DateTime @default(now()) @db.Timestamp(0)
  updated DateTime @default(now()) @db.Timestamp(0)
  orders  orders[]
}

model payment_status {
  id      Int      @id @default(autoincrement())
  name    String   @db.VarChar(255)
  name_en String   @db.VarChar(255)
  code    String   @db.VarChar(255)
  created DateTime @default(now()) @db.Timestamp(0)
  updated DateTime @default(now()) @db.Timestamp(0)
  orders  orders[]
}

model permissions {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  name_en          String             @db.VarChar(255)
  code             String             @db.VarChar(255)
  created          DateTime           @default(now()) @db.Timestamp(0)
  updated          DateTime           @default(now()) @db.Timestamp(0)
  role_permissions role_permissions[]
}

model product_images {
  id         Int       @id @default(autoincrement())
  product_id Int
  image      String    @db.VarChar(255)
  created    DateTime? @default(now()) @db.Timestamp(0)
  updated    DateTime? @default(now()) @db.Timestamp(0)
  products   products  @relation(fields: [product_id], references: [id], onUpdate: Restrict, map: "fk_product_images_products_1")

  @@index([product_id], map: "fk_product_images_products_1")
}

model product_location {
  id         Int       @id @default(autoincrement())
  product_id Int
  city_id    Int
  address    String    @db.VarChar(255)
  created    DateTime? @default(now()) @db.Timestamp(0)
  updated    DateTime? @default(now()) @db.Timestamp(0)
  cities     cities    @relation(fields: [city_id], references: [id], onUpdate: Restrict, map: "fk_product_location_cities_1")
  products   products  @relation(fields: [product_id], references: [id], onUpdate: Restrict, map: "fk_product_location_products_1")

  @@index([city_id], map: "fk_product_location_cities_1")
  @@index([product_id], map: "fk_product_location_products_1")
}

model role_permissions {
  id            Int         @id @default(autoincrement())
  role_id       Int
  permission_id Int
  created       DateTime    @default(now()) @db.Timestamp(0)
  updated       DateTime    @default(now()) @db.Timestamp(0)
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: Cascade, map: "role_permissions_ibfk_1")
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, map: "role_permissions_ibfk_2")

  @@index([permission_id], map: "permission_id")
  @@index([role_id], map: "role_id")
}

model roles {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  name_en          String             @db.VarChar(255)
  code             String             @db.VarChar(255)
  created          DateTime           @default(now()) @db.Timestamp(0)
  updated          DateTime           @default(now()) @db.Timestamp(0)
  role_permissions role_permissions[]
  user_roles       user_roles[]
}

model suggested_categories {
  id         Int      @id @default(autoincrement())
  product_id Int
  name       String   @db.VarChar(255)
  created    DateTime @default(now()) @db.Timestamp(0)
  updated    DateTime @default(now()) @db.Timestamp(0)
  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade, map: "suggested_categories_ibfk_1")

  @@index([product_id], map: "product_id")
}

model user_roles {
  id      Int      @id @default(autoincrement())
  user_id Int
  role_id Int
  created DateTime @default(now()) @db.Timestamp(0)
  updated DateTime @default(now()) @db.Timestamp(0)
  roles   roles    @relation(fields: [role_id], references: [id], onDelete: Cascade, map: "user_roles_ibfk_2")
  users   users    @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "user_roles_ibfk_1")

  @@index([role_id], map: "role_id")
  @@index([user_id], map: "user_id")
}

model users {
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(255)
  email         String        @unique(map: "email") @db.VarChar(255)
  phone         String        @unique(map: "phone") @db.VarChar(255)
  password      String        @db.VarChar(255)
  is_active     Boolean       @default(true)
  refresh_token String?       @db.VarChar(255)
  created       DateTime      @default(now()) @db.Timestamp(0)
  updated       DateTime      @default(now()) @db.Timestamp(0)
  agent_users   agent_users[]
  user_roles    user_roles[]
}

model inventories {
  id                                                                     Int                   @id @default(autoincrement())
  agent_id                                                               Int
  created                                                                DateTime              @default(now()) @db.Timestamp(0)
  updated                                                                DateTime              @default(now()) @db.Timestamp(0)
  agents                                                                 agents                @relation(fields: [agent_id], references: [id], onUpdate: Restrict, map: "fk_inventories_agents_1")
  inventory_item_logs_inventory_item_logs_from_inventory_idToinventories inventory_item_logs[] @relation("inventory_item_logs_from_inventory_idToinventories")
  inventory_item_logs_inventory_item_logs_to_inventory_idToinventories   inventory_item_logs[] @relation("inventory_item_logs_to_inventory_idToinventories")
  inventory_items                                                        inventory_items[]

  @@index([agent_id], map: "agent_id")
}

model inventory_items {
  id                  Int                   @id @default(autoincrement())
  inventory_id        Int
  product_id          Int
  price               Decimal               @default(0.00) @db.Decimal(10, 2)
  qty                 Int
  created             DateTime              @default(now()) @db.Timestamp(0)
  updated             DateTime              @default(now()) @db.Timestamp(0)
  inventory_item_logs inventory_item_logs[]
  inventories         inventories           @relation(fields: [inventory_id], references: [id], map: "inventory_items_ibfk_1")
  products            products              @relation(fields: [product_id], references: [id], map: "inventory_items_ibfk_2")

  @@index([inventory_id], map: "inventory_id")
  @@index([product_id], map: "inventory_items_ibfk_2")
}

model orders {
  id                Int            @id @default(autoincrement())
  agent_id          Int
  payment_status_id Int
  status_id         Int
  total_price       Int
  created           DateTime       @default(now()) @db.Timestamp(0)
  updated           DateTime       @default(now()) @db.Timestamp(0)
  agents            agents         @relation(fields: [agent_id], references: [id], onUpdate: Restrict, map: "fk_orders_agents_1")
  payment_status    payment_status @relation(fields: [payment_status_id], references: [id], map: "orders_ibfk_2")
  order_status      order_status   @relation(fields: [status_id], references: [id], map: "orders_ibfk_3")

  @@index([agent_id], map: "agent_id")
  @@index([payment_status_id], map: "payment_status_id")
  @@index([status_id], map: "status_id")
}

model products {
  id                   Int                    @id @default(autoincrement())
  category_id          Int?
  supplier_id          Int
  name                 String                 @db.VarChar(255)
  is_published         Boolean                @default(false)
  descr                String?                @db.Text
  image                String?                @db.VarChar(255)
  created              DateTime               @default(now()) @db.Timestamp(0)
  updated              DateTime               @default(now()) @db.Timestamp(0)
  inventory_items      inventory_items[]
  product_images       product_images[]
  product_location     product_location[]
  agents               agents                 @relation(fields: [supplier_id], references: [id], onUpdate: Restrict, map: "fk_products_agents_1")
  categories           categories?            @relation(fields: [category_id], references: [id], map: "products_ibfk_2")
  suggested_categories suggested_categories[]

  @@index([category_id], map: "category_id")
  @@index([supplier_id], map: "supplier_id")
}
